name: Backend CI (testing) â€” Test, Lint, Build & Push to ACR

on:
  workflow_dispatch:
  push:
    branches: [ testing ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci_testing.yml'

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_all:
    runs-on: ubuntu-latest

    services:
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres -d customers"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports: [ "5433:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres -d orders"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

      # Product DB (5434)
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports: [ "5434:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres -d products"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install shared CI tools
        run: |
          pip install --upgrade pip
          pip install pytest httpx flake8

      # ---------- customer_service ----------
      - name: Install customer_service deps
        if: ${{ always() }}
        working-directory: backend/customer_service
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test customer_service
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/customers
        run: pytest -q

      # ---------- order_service ----------
      - name: Install order_service deps
        working-directory: backend/order_service
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5433/orders
        run: pytest -q

      # ---------- product_service ----------
      - name: Install product_service deps
        working-directory: backend/product_service
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5434/products
        run: pytest -q

      # Lint everything (keep it after installs so flake8 is available)
      - name: Run flake8
        run: flake8 backend/

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_all   # <- only runs when tests & lint pass
    if: github.ref == 'refs/heads/testing'   # push images only from 'testing' branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      # Build & push customer_service
      - name: Build & push customer_service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} ./backend/customer_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest

      # Build & push order_service
      - name: Build & push order_service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ./backend/order_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      # Build & push product_service
      - name: Build & push product_service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ./backend/product_service/
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }} ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      - name: Logout Azure
        if: always()
        run: az logout
