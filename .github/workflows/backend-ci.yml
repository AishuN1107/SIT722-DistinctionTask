# .github/workflows/backend_ci.yml
name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: customers
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
        run: |
          cd backend
          pytest --maxfail=1 --disable-warnings -q

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.AZURE_CREDENTIALS }}" | docker login ${{ env.ACR_LOGIN_SERVER }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build and Push backend image
        run: |
          cd backend
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}
